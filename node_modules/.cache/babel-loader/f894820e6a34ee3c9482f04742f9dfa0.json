{"ast":null,"code":"import _objectSpread from \"C:/Users/Fardin/Documents/ngoding/bookstores/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { mapActions } from \"vuex\";\nexport default {\n  name: \"search\",\n  data: function data() {\n    return {\n      keyword: \"\",\n      items: []\n    };\n  },\n  methods: _objectSpread(_objectSpread({}, mapActions({\n    setStatusDialog: \"dialog/setStatus\"\n  })), {}, {\n    close: function close() {\n      this.setStatusDialog(false);\n    },\n    doSearch: function doSearch() {\n      var _this = this;\n\n      var keyword = this.keyword;\n\n      if (keyword.length > 0) {\n        this.axios.get(\"/books/search/\" + keyword).then(function (response) {\n          var books = response.data.data;\n          _this.items = books;\n        }).catch(function (error) {\n          console.log(error);\n        });\n      }\n    },\n    mounted: function mounted() {\n      var _this2 = this;\n\n      if (this.$refs.txtSearch != undefined) {\n        this.$nextTick(function () {\n          return _this2.$refs.txtSearch.focus();\n        });\n      }\n    }\n  })\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyCA;AACA;EACAA,cADA;EAEAC,IAFA,kBAEA;IACA;MACAC,WADA;MAEAC;IAFA;EAIA,CAPA;EAQAC,yCACAC;IACAC;EADA,EADA;IAIAC,KAJA,mBAIA;MACA;IACA,CANA;IAOAC,QAPA,sBAOA;MAAA;;MACA;;MACA;QACA,WACAC,GADA,CACA,0BADA,EAEAC,IAFA,CAEA;UACA;UACA;QACA,CALA,EAMAC,KANA,CAMA;UACAC;QACA,CARA;MASA;IACA,CApBA;IAqBAC,OArBA,qBAqBA;MAAA;;MACA;QACA;UAAA;QAAA;MACA;IACA;EAzBA;AARA","names":["name","data","keyword","items","methods","mapActions","setStatusDialog","close","doSearch","get","then","catch","console","mounted"],"sourceRoot":"src/views","sources":["SearchView.vue"],"sourcesContent":["<template>\r\n  <v-card>\r\n    <v-toolbar dark color=\"primary\">\r\n      <v-btn dark @click.native=\"close\">\r\n        <v-icon> mdi mdi-close </v-icon>\r\n      </v-btn>\r\n      <v-text-field\r\n        v-model=\"keyword\"\r\n        @input=\"doSeach\"\r\n        hide-details\r\n        append-icon=\"mdi mdi-microphone\"\r\n        text\r\n        label=\"Search\"\r\n        prepend-inner-icon=\"mdi mdi-magnify\"\r\n        solo-inverted\r\n        ref=\"txtSearch\"\r\n      >\r\n      </v-text-field>\r\n    </v-toolbar>\r\n    <v-divider></v-divider>\r\n    <v-subheader v-if=\"keyword.length > 0\">\r\n      Result Search \"{{ keyword }}\"\r\n    </v-subheader>\r\n    <v-alert :value=\"items.length == 0 && keyword.length > 0\" color=\"warning\">\r\n      Sorry, but no results were found.\r\n    </v-alert>\r\n    <v-list two-line v-if=\"items.length > 0\">\r\n      <template v-for=\"item in items\">\r\n        <v-list-item :key=\"item.id\" @click=\"close\" :to=\"'/book/' + item.slug\">\r\n          <v-list-item-avatar>\r\n            <img :src=\"getImage('/books/' + item.cover)\" />\r\n          </v-list-item-avatar>\r\n          <v-list-item-content>\r\n            <v-list-item-title v-html=\"item.title\"> </v-list-item-title>\r\n          </v-list-item-content>\r\n        </v-list-item>\r\n      </template>\r\n    </v-list>\r\n  </v-card>\r\n</template>\r\n<script>\r\nimport { mapActions } from \"vuex\";\r\nexport default {\r\n  name: \"search\",\r\n  data() {\r\n    return {\r\n      keyword: \"\",\r\n      items: [],\r\n    };\r\n  },\r\n  methods: {\r\n    ...mapActions({\r\n      setStatusDialog: \"dialog/setStatus\",\r\n    }),\r\n    close() {\r\n      this.setStatusDialog(false);\r\n    },\r\n    doSearch() {\r\n      let keyword = this.keyword;\r\n      if (keyword.length > 0) {\r\n        this.axios\r\n          .get(\"/books/search/\" + keyword)\r\n          .then((response) => {\r\n            let books = response.data.data;\r\n            this.items = books;\r\n          })\r\n          .catch((error) => {\r\n            console.log(error);\r\n          });\r\n      }\r\n    },\r\n    mounted() {\r\n      if (this.$refs.txtSearch != undefined) {\r\n        this.$nextTick(() => this.$refs.txtSearch.focus());\r\n      }\r\n    },\r\n  },\r\n};\r\n</script>"]},"metadata":{},"sourceType":"module"}